%!PS

/bdef { bind def } bind def
/xdef { exch def } bdef

/square {
    newpath
    /side xdef
    /y xdef
    /x xdef
    x y moveto
    side 0 rlineto
    0 side rlineto
    side neg 0 rlineto
    closepath
    stroke
} def

% --------------------------------------------------------------------
% Draw a square.

250 350 100 square

% --------------------------------------------------------------------
% Draw a circle in the square.

newpath
300 400 50 0 360 arc
closepath
stroke

% --------------------------------------------------------------------
% Draw an equilateral triangle in the circle.

newpath

    % Start from the apex of the triangle.
    % (Top center of the square/circle).
300 450 moveto

    % Use polar coordinates to calculate the x,y point of the bottom
    % left point of the triangle.
    % Note: postscript cos works in degrees!
    % x = cos(240 degrees) * radius
    % y = sin(240 degress) * radius
    % The radius represents the length of one side of the equilateral
    % triangle, and that is equal to the square root of 3 times the
    % radius of the circle.
    % We also translate our position at the end.
240 cos 3 sqrt 50 mul mul 300 add % x
240 sin 3 sqrt 50 mul mul 450 add % y
lineto

    % We can just draw the bottom by using the length
    % of a triangle side.
3 sqrt 50 mul 0 rlineto
closepath

stroke

showpage
